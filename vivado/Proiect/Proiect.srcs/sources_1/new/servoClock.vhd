library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity servoClock is
    Port(clk : in std_logic; -- the clk generated by the board
         rst : in std_logic;
         clk_out : out std_logic); -- a clock that changes state every 20 ms, time that is usually used for PWM signals on servo motors
end servoClock;

architecture Behavioral of servoClock is

signal aux_clk : std_logic := '0';
signal counter : integer := 0; -- at 50MHz, every 20 ms the clk generated by the zybo changes states into rising 1 000 000 times, 
                               -- so if we want 20 ms intervals, we have to compare this to 1 000 000

begin

    process(clk,rst)
    begin
        if rst = '1' then
            aux_clk <= '0';
            counter <= 0;
        elsif rising_edge(clk) then
            if counter = 1000000 then -- if 20 ms passed, or 1 000 000 clk changes into rising,
                aux_clk <= not(aux_clk); -- we change the state of our clk_out
                counter <= 0; -- and reset the counter to start counting again
            else
                counter <= counter + 1;
            end if;
        end if;
    
        clk_out <= aux_clk;
    end process;

end Behavioral;
